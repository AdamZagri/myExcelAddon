name: RotleinPriority-TaskPane
description: Save connection settings and display companies in Excel
host: EXCEL
api_set: {}
script:
  content: |
    async function saveSettings() {
      const url = (document.getElementById("url") as HTMLInputElement).value;
      const tabulaIni = (document.getElementById("tabulaIni") as HTMLInputElement).value;
      const apiUser = (document.getElementById("apiUser") as HTMLInputElement).value;
      const apiPassword = (document.getElementById("apiPassword") as HTMLInputElement).value;

      const connectionDetails = `${url},${tabulaIni},${apiUser},${apiPassword}`;

      try {
        // שליחה לשרת לקבלת רשימת החברות ב-POST
        const response = await fetch("https://exceladdon.cloudline.co.il/companies", {
          method: "POST",
          headers: { "Content-Type": "application/json" },
          body: JSON.stringify({
            url: url,
            user: apiUser,
            password: apiPassword,
            tabula: tabulaIni
          })
        });

        if (!response.ok) {
          throw new Error("Network response was not ok");
        }

        const companies = await response.json();
        console.log("Fetched companies:", companies);

        await Excel.run(async (context) => {
          let sheet;

          // בדוק אם הגיליון P קיים, אם כן, מחק אותו
          const existingSheet = context.workbook.worksheets.getItemOrNullObject("P");
          await context.sync(); // סנכרון כדי לוודא שהשגיאה לא תיזרק

          if (!existingSheet.isNullObject) {
            existingSheet.delete(); // מחק את הגליון הקיים
            await context.sync(); // סנכרון לאחר המחיקה
          }

          // צור גיליון חדש בשם P
          sheet = context.workbook.worksheets.add("P");

          // שמירת פרטי החיבור בתא A1
          const headerCell = sheet.getRange("A1");
          headerCell.values = [[connectionDetails]];

          // ניקוי עמודה A החל מהשורה השנייה
          const rangeToClear = sheet.getRange("A2:A1048576"); // מנקה את כל העמודה A מהשורה השנייה ומטה
          rangeToClear.clear();

          // שמירת שמות החברות בעמודה A מהשורה השנייה והלאה
          for (let i = 0; i < companies.length; i++) {
            const company = companies[i];
            const cell = sheet.getRange(`A${i + 2}`);
            cell.values = [[company.prettyname]];
          }

          // הסתרת הגליון
          //sheet.visibility = Excel.SheetVisibility.hidden;
          await context.sync(); // סנכרון השינויים

          await renameCells(companies.length); // Pass the number of companies

          // הצגת הודעה מוצלחת
          const successMessageDiv = document.getElementById("successMessage");
          successMessageDiv.innerText = `המערכת התחברה בהצלחה ומצאה ${companies.length} חברות מהן ניתן לסנכרן נתונים. כדי להשתמש יש לעשות שימוש בפורמולה המתאימה עם תחילית CMP מתאימה`;
          successMessageDiv.style.display = "block";

          setTimeout(() => {
            successMessageDiv.style.display = "none";
          }, 5000); // הסתרת ההודעה לאחר 5 שניות
        });
      } catch (error) {
        console.error("Error saving settings or fetching companies:", error);
      }
    }

    async function renameCells(companyCount) {
      await Excel.run(async (context) => {
        const sheet = context.workbook.worksheets.getItem("P");

        // Set A1 name to "ROTL"
        const headerCell = sheet.getRange("A1");
        const existingName = context.workbook.names.getItemOrNullObject("ROTL");
        await context.sync();

        if (existingName.isNullObject) {
          context.workbook.names.add("ROTL", headerCell);
        } else {
          existingName.delete();
          context.workbook.names.add("ROTL", headerCell);
        }

        const range = sheet.getRange("A2:A" + (companyCount + 1));
        range.load("values");
        await context.sync();

        for (let i = 0; i < range.values.length; i++) {
          const cellValue = range.values[i][0];
          if (cellValue) {
            const boxName = `CMP${i + 1}_${cellValue}`;

            const existingCellName = context.workbook.names.getItemOrNullObject(boxName);
            await context.sync();

            if (!existingCellName.isNullObject) {
              existingCellName.delete();
            }

            const cell = sheet.getRange(`A${i + 2}`);
            context.workbook.names.add(boxName, cell);
            console.log(`Added name: ${boxName} for value: ${cellValue}`);
          } else {
            console.log(`Skipping empty cell A${i + 2}`);
          }
        }

        await context.sync();
      });
    }
  language: typescript
template:
  content: |
    <div class="form-container">
      <div class="logo-container">
        <img src="https://www.rotlein.co.il/wp-content/uploads/2016/06/logo-1.png" alt="רוטליין" class="logo-img-primary pojo-hidden-phone">
      </div>
      <h2>הגדרות חיבור לסביבת פריוריטי</h2>
      <div id="successMessage"
        style="display: none; background-color: #4CAF50; color: white; padding: 10px; margin: 10px 0; text-align: center; border-radius: 5px;">
      </div>
      <form>
        <label for="url">API URL:</label>
        <input type="text" id="url" value="">
        <label for="tabulaIni">Tabula INI:</label>
        <input type="text" id="tabulaIni" value="">
        <label for="apiUser">API User:</label>
        <input type="text" id="apiUser" value="">
        <label for="apiPassword">API Password:</label>
        <input type="password" id="apiPassword" value="">
        <button type="button" onclick="saveSettings()">Save Settings</button>
      </form>
    </div>
  language: html
style:
  content: |-
    body {
      font-family: 'Arial', sans-serif;
      background-color: #f3f0ff;
      color: #333;
      padding: 20px;
      display: flex;
      justify-content: center;
      align-items: center;
      height: 100vh;
      margin: 0;
    }

    .form-container {
      width: 100%;
      max-width: 400px;
      background-color: #fff;
      padding: 30px;
      border-radius: 8px;
      box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
      text-align: center;
    }

    h2 {
      font-size: 28px;
      color: #4b0082;
      margin-bottom: 20px;
    }

    label {
      display: block;
      font-weight: bold;
      margin-bottom: 8px;
      color: #4b0082;
      text-align: left;
    }

    input[type="text"],
    input[type="password"] {
      width: 100%;
      padding: 10px;
      margin-bottom: 20px;
      border: 1px solid #ddd;
      border-radius: 4px;
      font-size: 16px;
    }

    input[type="text"]:focus,
    input[type="password"]:focus {
      border-color: #4b0082;
      outline: none;
      box-shadow: 0 0 4px #4b0082;
    }

    button {
      width: 100%;
      padding: 12px;
      background-color: #4b0082;
      color: white;
      border: none;
      border-radius: 4px;
      cursor: pointer;
      font-size: 16px;
      transition: background-color 0.3s;
    }

    button:hover {
      background-color: #6a0dad;
    }

    .logo-container {
      text-align: center;
      margin-bottom: 20px;
    }

    .logo-container img {
      max-width: 120px;
      height: auto;
    }
  language: css
libraries: |+
  https://appsforoffice.microsoft.com/lib/1/hosted/office.js
  @types/office-js

  office-ui-fabric-js@1.4.0/dist/css/fabric.min.css
  office-ui-fabric-js@1.4.0/dist/css/fabric.components.min.css

  core-js@2.4.1/client/core.min.js
  @types/core-js

  jquery@3.1.1
  @types/jquery@3.3.1

  https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js
